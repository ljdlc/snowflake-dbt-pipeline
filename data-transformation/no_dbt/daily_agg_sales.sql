-- Get last date in daily_aggregated sales table
SET LAST_SOLD_DATE_SK = (SELECT MAX(SOLD_DATE_SK) FROM SF_TPCDS2.INTERMEDIATE.DAILY_AGGREGATED_SALES);

-- Remove partial records from the last date
DELETE FROM SF_TPCDS2.INTERMEDIATE.DAILY_AGGREGATED_SALES WHERE SOLD_DATE_SK = $LAST_SOLD_DATE_SK;

-- Create temporary daily aggregated sales table to transform the data to be properly inserted into the final daily aggregated sales table
CREATE OR REPLACE TRANSIENT TABLE SF_TPCDS2.INTERMEDIATE.DAILY_AGGREGATED_SALES_TMP AS (

WITH INCREMENTAL_SALES AS (
    SELECT
        CS_WAREHOUSE_SK AS WAREHOUSE_SK,
        CS_ITEM_SK AS ITEM_SK,
        CS_SOLD_DATE_SK AS SOLD_DATE_SK,
        CS_QUANTITY AS QUANTITY,
        (CS_SALES_PRICE * CS_QUANTITY) AS SALES_AMT,
        CS_NET_PROFIT AS NET_PROFIT
    FROM TPCDS2.RAW.CATALOG_SALES
    WHERE SOLD_DATE_SK >= NVL($LAST_SOLD_DATE_SK,0)
    AND QUANTITY IS NOT NULL
    AND SALES_AMT IS NOT NULL

    UNION ALL

    SELECT
        WS_WAREHOUSE_SK AS WAREHOUSE_SK,
        WS_ITEM_SK AS ITEM_SK,
        WS_SOLD_DATE_SK AS SOLD_DATE_SK,
        WS_QUANTITY AS QUANTITY,
        (WS_SALES_PRICE * WS_QUANTITY) AS SALES_AMT,
        WS_NET_PROFIT AS NET_PROFIT
    FROM TPCDS2.RAW.WEB_SALES
    WHERE SOLD_DATE_SK >= NVL($LAST_SOLD_DATE_SK,0)
    AND QUANTITY IS NOT NULL
    AND SALES_AMT IS NOT NULL
    ),

    AGGREGATING_RECORDS_TO_DAILY_SALES AS
    (
    SELECT
        WAREHOUSE_SK,
        ITEM_SK,
        SOLD_DATE_SK,
        SUM(QUANTITY) AS DAILY_QTY,
        SUM(SALES_AMT) AS DAILY_SALES_AMT,
        SUM(NET_PROFIT) AS DAILY_PROFIT,
    FROM INCREMENTAL_SALES
    GROUP BY 1, 2, 3
    ),

    ADDING_WEEK_NUMBER_AND_YR_NUMBER AS (
        SELECT
            WAREHOUSE_SK,
            ITEM_SK,
            SOLD_DATE_SK,
            DAILY_QTY,
            DAILY_SALES_AMT,
            DAILY_PROFIT,
            DATE.WK_NUM AS SOLD_WK_NUM,
            DATE.YR_NUM AS SOLD_YR_NUM
        FROM AGGREGATING_RECORDS_TO_DAILY_SALES
        LEFT JOIN TPCDS2.RAW.DATE_DIM DATE
            ON SOLD_DATE_SK = D_DATE_SK 
    )

-- Create final table from CTE's. Group by aggregations as a redundancy measure to ensure there are no errors
    SELECT
        WAREHOUSE_SK,
        ITEM_SK,
        SOLD_DATE_SK,
        MAX(SOLD_WK_NUM) AS SOLD_WK_NUM,
        MAX(SOLD_YR_NUM) AS SOLD_YR_NUM,
        SUM(DAILY_QTY), AS DAILY_QTY,
        SUM(DAILY_SALES_AMT) AS DAILY_SALES_AMT,
        SUM(DAILY_PROFIT) AS DAILY_PROFIT
        FROM ADDING_WEEK_NUMBER_AND_YR_NUMBER
        GROUP BY 1, 2, 3
        ORDER BY 1, 2, 3
);

-- Insert transformed values from temporary daily aggegregated sales table into the non-temporary daily aggregated sales table

INSERT INTO SF_TPCDS2.INTERMEDIATE.DAILY_AGGREGATED_SALES
(
    WAREHOUSE_SK,
    ITEM_SK,
    SOLD_DATE_SK,
    SOLD_WK_NUM,
    SOLD_YR_NUM,
    DAILY_QTY,
    DAILY_SALES_AMT,
    DAILY_PROFIT
)
SELECT 
    DISTINCT
    WAREHOUSE_SK,
    ITEM_SK,
    SOLD_DATE_SK,
    SOLD_WK_NUM,
    SOLD_YR_NUM,
    DAILY_QTY,
    DAILY_SALES_AMT,
    DAILY_PROFIT
FROM SF_TPCDS2.INTERMEDIATE.DAILY_AGGREGATED_SALES_TMP;
