-- Get last wk in weekly_aggregated sales table
SET LAST_SOLD_WK_SK = (SELECT MAX(SOLD_WK_SK) FROM SF_TPCDS2.ANALYTICS.WEEKLY_SALES_INVENTORY);

-- Remove partial records from the last wk
DELETE FROM SF_TPCDS2.ANALYTICS.WEEKLY_SALES_INVENTORY WHERE SOLD_WK_SK = $LAST_SOLD_WK_SK;

CREATE OR REPLACE TEMPORARY TABLE SF_TPCDS2.ANALYTICS.WEEKLY_SALES_INVENTORY_TMP AS (

WITH AGG_DAILY_SALES_TO_WEEK AS (
    SELECT
        WAREHOUSE_SK,
        ITEM_SK,
        MIN(SOLD_DATE_SK) AS SOLD_WK_SK,
        SOLD_WK_NUM,
        SOLD_YR_NUM,
        SUM(DAILY_QTY) AS SUM_QTY_WK,
        SUM(DAILY_SALES_AMT) AS SUM_AMT_WK,
        SUM(DAILY_PROFIT) AS SUM_PROFIT_WK
    FROM
        SF_TPCDS2.INTERMEDIATE.DAILY_AGGREGATED_SALES
    GROUP BY
        1, 2, 4, 5
    HAVING
        SOLD_WK_SK >= NVL($LAST_SOLD_WK_SK, 0)
),

-- THIS CTE FINDS THE FIRST DATE OF THE WEEK TO ASSOCIATE IT WITH WK_NUM AND YR_NUM
FINDING_FIRST_DATE_OF_WEEK AS (
    SELECT
        WAREHOUSE_SK,
        ITEM_SK,
        DATE.D_DATE_SK AS SOLD_WK_SK,
        SOLD_WK_NUM,
        SOLD_YR_NUM,
        SUM_QTY_WK,
        SUM_AMT_WK,
        SUM_PROFIT_WK
    FROM AGG_DAILY_SALES_TO_WEEK DAILY_SALES
    INNER JOIN TPCDS2.RAW.DATE_DIM AS DATE
    ON DAILY_SALES.SOLD_WK_NUM = DATE.WK_NUM
    AND DAILY_SALES.SOLD_YR_NUM = DATE.YR_NUM
    AND DATE.DAY_OF_WK_NUM = 0
),

--INVENTORY TABLE GETS POPULATED EVERY FRIDAY, SO THIS CTE FINDS THE FRIDAY DATE SO THE INVENTORY TABLE CAN BE JOINED ON FRIDAY 
POPULATING_FRIDAY_DATE_FOR_THE_WEEK AS (
    SELECT
        WAREHOUSE_SK,
        ITEM_SK,
        SOLD_WK_SK,
        SOLD_WK_NUM,
        SOLD_YR_NUM,
        SUM_QTY_WK,
        SUM_AMT_WK,
        SUM_PROFIT_WK,
        DATE.D_DATE_SK AS FRIDAY_SK
    FROM FINDING_FIRST_DATE_OF_WEEK DAILY_SALES
    INNER JOIN TPCDS2.RAW.DATE_DIM AS DATE
    ON DAILY_SALES.SOLD_WK_NUM = DATE.WK_NUM
    AND DAILY_SALES.SOLD_YR_NUM = DATE.YR_NUM
    AND DATE.DAY_OF_WK_NUM = 5
)

SELECT
    WAREHOUSE_SK,
    ITEM_SK,
    MAX(SOLD_WK_SK) AS SOLD_WK_SK,
    SOLD_WK_NUM AS SOLD_WK_NUM,
    SOLD_YR_NUM AS SOLD_YR_NUM,
    SUM(SUM_QTY_WK) AS SUM_QTY_WK,
    SUM(SUM_AMT_WK) AS SUM_AMT_WK,
    SUM(SUM_PROFIT_WK) AS SUM_PROFIT_WK,
    SUM(SUM_QTY_WK)/7 AS AVG_QTY_DY,
    SUM(COALESCE(INV.INV_QUANTITY_ON_HAND, 0)) AS INV_QTY_WK,
    SUM(COALESCE(INV.INV_QUANTITY_ON_HAND, 0)) / SUM(SUM_QTY_WK) AS WKS_SUPPLY,
    IFF(AVG_QTY_DY > 0 AND AVG_QTY_DY > INV_QTY_WK, TRUE, FALSE) AS LOW_STOCK_FLG_WK
FROM POPULATING_FRIDAY_DATE_FOR_THE_WEEK
LEFT JOIN TPCDS2.RAW.INVENTORY INV
ON INV_DATE_SK = FRIDAY_SK
AND ITEM_SK = INV_ITEM_SK
AND INV_WAREHOUSE_SK = WAREHOUSE_SK
GROUP BY 1, 2, 4, 5
-- REDUNDANCY CONDITION TO ENSURE THERE ARE NO ZERO OR NEGATIVE QUANTITIES IN THE FINAL MODEL. ZERO OR NEGATIVE QUANTITIES ARE ERRORS
HAVING SUM(SUM_QTY_WK) > 0
);

-- INSERT NEW RECORDS
INSERT INTO SF_TPCDS2.ANALYTICS.WEEKLY_SALES_INVENTORY
(
    WAREHOUSE_SK,
    ITEM_SK,
    SOLD_WK_SK,
    SOLD_WK_NUM,
    SOLD_YR_NUM,
    SUM_QTY_WK,
    SUM_AMT_WK,
    SUM_PROFIT_WK,
    AVG_QTY_DY,
    INV_QTY_WK,
    WKS_SUPPLY,
    LOW_STOCK_FLG_WK
)

SELECT DISTINCT
    WAREHOUSE_SK,
    ITEM_SK,
    SOLD_WK_SK,
    SOLD_WK_NUM,
    SOLD_YR_NUM,
    SUM_QTY_WK,
    SUM_AMT_WK,
    SUM_PROFIT_WK,
    AVG_QTY_DY,
    INV_QTY_WK,
    WKS_SUPPLY,
    LOW_STOCK_FLG_WK
FROM SF_TPCDS2.ANALYTICS.WEEKLY_SALES_INVENTORY_TMP;

-- CHECK IF DATA IS INSERTED PROPERLY
SELECT * FROM SF_TPCDS2.ANALYTICS.WEEKLY_SALES_INVENTORY;
